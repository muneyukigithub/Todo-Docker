version: "3.7"
services:
  web:
    container_name: web-nginx
    expose:
      - "80"
    build: ./web/nginx/.
    ports:
      - "80:80"
    depends_on:
      - frontend
    networks:
      - backend_network
      - frontend_network
  backend:
    container_name: backend-django
    expose:
      - "8000"
    build: ./backend/django/.
    volumes:
      - ./backend/django:/code
    working_dir: /code
    command: bash -c "python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000"
    networks:
      - backend_network
    environment:
      - CHOKIDAR_USEPOLLING=true
      - DJANGO_SETTINGS_MODULE=Todo_DRF.settings.settings_dev
    depends_on:
      db:
        condition: service_healthy #DBのヘルスチェックが完了するまで待機
  db:
    container_name: db-mysql
    expose:
      - "3306"
    build: ./mysql/.
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: TodoListDB
      MYSQL_USER: user
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: 'Asia/Tokyo'
    healthcheck:
      #ヘルスチェック
      test:
        #ヘルスチェックの実行コマンド
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${MYSQL_ROOT_PASSWORD}"
        ]
      timeout: 20s #ヘルスチェックコマンドの制限時間
      interval: 10s #リトライ間隔時間
      retries: 10 #リトライ回数
    volumes:
      - ./mysql/mysql_volume:/var/lib/mysql
      - ./sql:/docker-entrypoint-initdb.d
    networks:
      - backend_network
  frontend:
    container_name: frontend-react
    build: ./frontend/react/
    expose:
      - "3000"
    working_dir: /code
    volumes:
      - ./frontend/react:/code #アプリケーションコードのボリューム
      - node_modules:/code/node_modules #node_modulesのボリューム ※nodo_modulesが上書きされないため
    command: npm run start
    depends_on:
      - backend
    networks:
      - frontend_network
networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge
volumes:
  node_modules:
